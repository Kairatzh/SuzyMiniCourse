import asyncio
import logging
import os
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ParseMode, ChatAction
from ai_service.src.workflow import generate_c
from dotenv import load_dotenv
from functools import wraps
from typing import Optional


# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==================
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


# ================== –£—Ç–∏–ª–∏—Ç—ã ==================
def send_typing_action(func):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...'"""
    @wraps(func)
    async def command_func(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        await context.bot.send_chat_action(
            chat_id=update.effective_message.chat_id,
            action=ChatAction.TYPING,
        )
        return await func(update, context, *args, **kwargs)
    return command_func


def split_message(text: str, max_length: int = 4096) -> list[str]:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–º–∏—Ç—É Telegram"""
    if len(text) <= max_length:
        return [text]

    parts, current = [], ""
    for line in text.split("\n"):
        if len(current) + len(line) + 1 <= max_length:
            current += line + "\n"
        else:
            parts.append(current.strip())
            current = line + "\n"
    if current:
        parts.append(current.strip())
    return parts


async def send_long_message(update: Update, text: str, parse_mode: Optional[str] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º"""
    for i, part in enumerate(split_message(text)):
        await update.message.reply_text(part, parse_mode=parse_mode)
        if i < len(part) - 1:
            await asyncio.sleep(0.3)


# ================== –ö–æ–º–∞–Ω–¥—ã ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø Suzy Mini Course –±–æ—Ç.</b>\n\n"
        "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º –º–∏–Ω–∏-–∫—É—Ä—Å —Å:\n"
        "üìò –ö–æ–Ω—Å–ø–µ–∫—Ç–æ–º\nüß© –¢–µ—Å—Ç–∞–º–∏\nüé¨ –í–∏–¥–µ–æ\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–û—Å–Ω–æ–≤—ã Python¬ª</i>"
    )
    await update.message.reply_text(welcome_message, parse_mode=ParseMode.HTML)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    text = (
        "‚ùì <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞¬ª)\n"
        "2. –ü–æ–¥–æ–∂–¥–∏ 30‚Äì60 —Å–µ–∫—É–Ω–¥\n"
        "3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –∫—É—Ä—Å üìò\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)


# ================== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ==================
@send_typing_action
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    topic = update.message.text.strip()

    if not topic:
        return await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —Ç–µ–º—É –∫—É—Ä—Å–∞!")

    if len(topic) > 500:
        return await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤).")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–º—É: {topic}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_message = await update.message.reply_text(
        f"‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—É—Ä—Å –ø–æ —Ç–µ–º–µ: <i>{topic}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏ 30‚Äì60 —Å–µ–∫—É–Ω–¥...",
        parse_mode=ParseMode.HTML,
    )

    try:
        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, generate_c, topic)

        await status_message.delete()
        logger.info(f"‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user_id}")

        # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ===
        summary = result.summary or "–ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω."
        tests = result.tests or []
        videos = result.videos or []

        # –ö–æ–Ω—Å–ø–µ–∫—Ç
        await send_long_message(
            update,
            f"üìò <b>–ö–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —Ç–µ–º–µ:</b> <i>{topic}</i>\n\n{summary}",
            ParseMode.HTML,
        )

        # –¢–µ—Å—Ç—ã
        if tests:
            text = "üß© <b>–¢–µ—Å—Ç—ã:</b>\n\n" + "\n\n".join(
                f"{i+1}. {q}" for i, q in enumerate(tests)
            )
            await send_long_message(update, text, ParseMode.HTML)
        else:
            await update.message.reply_text("üß© –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode=ParseMode.HTML)

        # –í–∏–¥–µ–æ
        if videos:
            text = "üé¨ <b>–í–∏–¥–µ–æ:</b>\n\n" + "\n".join(f"{i+1}. {v}" for i, v in enumerate(videos))
            await send_long_message(update, text, ParseMode.HTML)
        else:
            await update.message.reply_text("üé¨ –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.HTML)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ –ö—É—Ä—Å –≥–æ—Ç–æ–≤! –ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É—Ä—Å–∞ üìö",
            parse_mode=ParseMode.HTML,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–∞: {e}", exc_info=True)
        await status_message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )


# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ==================
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# ================== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ==================
async def main():
    if not BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        return

    app = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(lambda _: logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"))
        .concurrent_updates(True)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Suzy Mini Course –±–æ—Ç–∞...")
    await app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == "__main__":
    if os.name == "nt":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫...")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(main())
        else:
            raise
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
